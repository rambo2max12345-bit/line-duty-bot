# -*- coding: utf-8 -*-

# ========================================================================================
# LINE Bot ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 13 - Final Rich Menu)
# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Access Token / Secret / Firebase
# ========================================================================================

from flask import Flask, request, abort, send_from_directory
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction,
    DatetimePickerAction, PostbackEvent,
    ImageSendMessage
)
import os
import json
from datetime import datetime, timedelta
import uuid

import firebase_admin
from firebase_admin import credentials, firestore

from dotenv import load_dotenv
load_dotenv()  # ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å .env

try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    Image = None
    ImageDraw = None
    ImageFont = None

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE ---
CHANNEL_ACCESS_TOKEN = os.getenv("8Qa3lq+KjkF68P1W6xAkkuRyoXpz9YyuQI2nOKJRu/ndsvfGLZIft6ltdgYV8vMEbBkz5AWzYoF+CaS7u0OShmuZvo5Yufb6+Xvr4gBti4Gc4cp45MCnyD0cte94vZyyEhLKC3WJKvd9usUXqCwrOgdB04t89/1O/w1cDnyilFU=")
CHANNEL_SECRET = os.getenv("1d0c51790d0bff2b98dbb98dc8f72663")

app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Firebase ---
try:
    firebase_json = os.getenv("FIREBASE_CREDENTIALS_JSON")
    if firebase_json:
        cred_dict = json.loads(firebase_json)
        cred = credentials.Certificate(cred_dict)
        if not firebase_admin._apps:
            firebase_admin.initialize_app(cred)
        db = firestore.client()
        app.logger.info("Firebase connected successfully.")
    else:
        db = None
        app.logger.warning("FIREBASE_CREDENTIALS_JSON not found. Firebase not connected.")
except Exception as e:
    db = None
    app.logger.error(f"Firebase connection failed: {e}")

# --- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ---
user_states = {}
personnel_list = [
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ö‡∏∏‡∏ç‡∏ò‡∏£‡∏£‡∏° ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πá‡∏°", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏™‡∏ô‡∏ò‡∏¢‡∏≤ ‡∏õ‡∏£‡∏≤‡∏ö‡∏ì‡∏£‡∏á‡∏Ñ‡πå", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏Ñ‡πÄ‡∏ô‡∏® ‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏Ç‡∏ß‡∏±‡∏ç‡∏ö‡∏∏‡∏ï‡∏£",
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ì‡∏±‡∏ê‡∏û‡∏• ‡πÅ‡∏™‡∏ß‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò ‡∏°‡∏ì‡∏µ", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏≠‡∏ô‡∏∏‡∏ä‡∏≤ ‡∏Ñ‡∏≥‡∏•‡∏≤‡∏î",
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ß‡∏µ‡∏£‡∏∞‡∏¢‡∏∏‡∏ó‡∏ò ‡∏ö‡∏∏‡∏ç‡∏°‡∏≤‡∏ô‡∏±‡∏™", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏Å‡∏•‡πâ‡∏≤‡∏ì‡∏£‡∏á‡∏Ñ‡πå ‡∏Ñ‡∏á‡∏•‡∏≥‡∏ò‡∏≤‡∏£", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ä‡∏ô‡∏∞‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Å‡∏≤‡∏™‡∏±‡∏á‡∏Ç‡πå",
    "‡∏≠‡∏™.‡∏ó‡∏û.‡πÄ‡∏≠‡∏Å‡∏ä‡∏±‡∏¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ú‡∏•", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏≠‡∏ô‡∏∏‡∏ä‡∏≤ ‡∏ô‡∏û‡∏ß‡∏á‡∏®‡πå", "‡∏≠‡∏™.‡∏ó‡∏û.‡πÇ‡∏Å‡∏ß‡∏¥‡∏ó‡∏¢‡πå ‡∏ó‡∏≠‡∏á‡∏Ç‡∏≤‡∏ß‡∏ö‡∏±‡∏ß",
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏Å‡∏±‡∏°‡∏û‡∏• ‡∏ó‡∏≠‡∏á‡∏®‡∏£‡∏µ"
]

# --- Serve Image ---
@app.route("/images/<filename>")
def serve_image(filename):
    image_dir = '/tmp/line_bot_images'
    return send_from_directory(image_dir, filename)

# --- Webhook ---
@app.route("/webhook", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# --- Message Event Handler ---
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    from linebot.models import TextSendMessage
    user_id = event.source.user_id
    user_message = event.message.text

    # --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State ---
    if user_id in user_states:
        current_step = user_states[user_id]['step']
        if current_step.startswith("awaiting"):
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≤‡∏á ‡πÜ
            pass  # ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    else:
        # --- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Rich Menu ---
        if user_message == "#‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤":
            user_states[user_id] = {"step": "awaiting_leave_type", "data": {}}
            leave_buttons = [
                QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏û‡∏±‡∏Å", text="‡∏•‡∏≤‡∏û‡∏±‡∏Å")),
                QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏Å‡∏¥‡∏à", text="‡∏•‡∏≤‡∏Å‡∏¥‡∏à")),
                QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", text="‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢")),
                QuickReplyButton(action=MessageAction(label="‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", text="‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")),
                QuickReplyButton(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="#‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
            ]
            reply_msg = TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö", quick_reply=QuickReply(items=leave_buttons))
            line_bot_api.reply_message(event.reply_token, reply_msg)
        elif user_message == "#‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï":
            if user_id in user_states: del user_states[user_id]
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="üîÑÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"))

# --- Postback Event Handler ---
@handler.add(PostbackEvent)
def handle_postback(event):
    pass  # ‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

# --- Run Server ---
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

