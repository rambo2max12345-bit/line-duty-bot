# -*- coding: utf-8 -*-

# ========================================================================================
# ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot ‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏£ (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô 3)
# ‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•
# ========================================================================================

from flask import Flask, request, abort

from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import (
    InvalidSignatureError
)
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)

import os

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
CHANNEL_ACCESS_TOKEN = os.environ.get('CHANNEL_ACCESS_TOKEN', '8Qa3lq+KjkF68P1W6xAkkuRyoXpz9YyuQI2nOKJRu/ndsvfGLZIft6ltdgYV8vMEbBkz5AWzYoF+CaS7u0OShm uZvo5Yufb6+Xvr4gBti4Gc4cp45MCnyD0cte94vZyyEhLKC3WJKvd9usUXqCwrOgdB04t89/1O/w1cDnyilFU=')
CHANNEL_SECRET = os.environ.get('CHANNEL_SECRET', '1d0c51790d0bff2b98dbb98dc8f72663')
# -------------------------

app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# --- ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Bot (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
user_states = {}

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---
# ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
personnel_list = [
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ö‡∏∏‡∏ç‡∏ò‡∏£‡∏£‡∏° ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πá‡∏°", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏ä‡∏ô‡∏∞‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡∏Å‡∏≤‡∏™‡∏±‡∏á‡∏Ç‡πå", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏™‡∏ô‡∏ò‡∏¢‡∏≤ ‡∏õ‡∏£‡∏≤‡∏ö‡∏ì‡∏£‡∏á‡∏Ñ‡πå",
    "‡∏≠‡∏™.‡∏ó‡∏û.‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏ô‡∏∞‡∏à‡πä‡∏∞", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏Å‡∏±‡∏°‡∏û‡∏• ‡∏ó‡∏≠‡∏á‡∏®‡∏£‡∏µ", "‡∏≠‡∏™.‡∏ó‡∏û.‡∏≠‡∏∑‡πà‡∏ô‡πÜ" # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
]
# ------------------------------------

@app.route("/webhook", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    user_message = event.message.text

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ---
    if user_id in user_states:
        current_step = user_states[user_id]['step']

        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏£‡∏≠‡∏£‡∏±‡∏ö "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤"
        if current_step == 'awaiting_leave_type':
            leave_type = user_message
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if leave_type == '#‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':
                del user_states[user_id]
                reply_message = TextSendMessage(text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
                line_bot_api.reply_message(event.reply_token, reply_message)
                return # ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ

            # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            user_states[user_id]['data']['type'] = leave_type
            
            # 2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏£‡∏±‡∏ö "‡∏ä‡∏∑‡πà‡∏≠"
            user_states[user_id]['step'] = 'awaiting_name'
            app.logger.info(f"User {user_id} selected leave type '{leave_type}'. State: {user_states[user_id]}")

            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•
            name_buttons = [QuickReplyButton(action=MessageAction(label=name, text=name)) for name in personnel_list]
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            name_buttons.append(QuickReplyButton(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="#‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")))
            
            # 4. ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            reply_message = TextSendMessage(
                text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö",
                quick_reply=QuickReply(items=name_buttons)
            )
            line_bot_api.reply_message(event.reply_token, reply_message)
            return # ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        # (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö step 'awaiting_name' ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà)
    if user_message == '#‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':
        if user_id in user_states:
            del user_states[user_id]
            reply_message = TextSendMessage(text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö")
            line_bot_api.reply_message(event.reply_token, reply_message)
        return

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Bot
    if user_message == '#Bot01':
        quick_reply_buttons = QuickReply(items=[
            QuickReplyButton(action=MessageAction(label="üìù ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤/‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", text="#‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤")),
            QuickReplyButton(action=MessageAction(label="üóìÔ∏è ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", text="#‡∏à‡∏±‡∏î‡πÄ‡∏ß‡∏£")),
            QuickReplyButton(action=MessageAction(label="üìÑ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤", text="#‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤"))
        ])
        reply_message = TextSendMessage(
            text="‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏¢‡∏ó‡πà‡∏≤‡∏ô",
            quick_reply=quick_reply_buttons
        )
        line_bot_api.reply_message(event.reply_token, reply_message)

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤
    elif user_message == '#‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤':
        user_states[user_id] = {'step': 'awaiting_leave_type', 'data': {}}
        app.logger.info(f"User {user_id} started leave process. Current states: {user_states}")
        leave_type_buttons = QuickReply(items=[
            QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏û‡∏±‡∏Å", text="‡∏•‡∏≤‡∏û‡∏±‡∏Å")),
            QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏Å‡∏¥‡∏à", text="‡∏•‡∏≤‡∏Å‡∏¥‡∏à")),
            QuickReplyButton(action=MessageAction(label="‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢", text="‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢")),
            QuickReplyButton(action=MessageAction(label="‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", text="‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")),
            QuickReplyButton(action=MessageAction(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="#‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
        ])
        reply_message = TextSendMessage(
            text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö",
            quick_reply=leave_type_buttons
        )
        line_bot_api.reply_message(event.reply_token, reply_message)


# ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Server
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

